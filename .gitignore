# Data Preprocessing and Text Preparation

# Importing necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import nltk
from nltk.stem.porter import PorterStemmer
from nltk.corpus import words
nltk.download('words')
nltk.download('stopwords')
from nltk.corpus import stopwords

class datapreprocessor():  # this class is useful for preprocessing textual data, such as removing stop words, stemming, and other operations to clean and prepare text data for further analysis.             
    def __init__(self):
        self.stopwords_updated = stopwords.words('english')
        self.stopwords_updated.append('nbsp')
        self.english_words = set(words.words())
        self.web2lowerset = get_english_words_set(['web2'], lower=True)
        self.english_words_combined = list(set(list(self.english_words) + list(self.web2lowerset)))
        self.partial_words = [word[0:5] for word in self.english_words_combined]
        self.ps = PorterStemmer()

    def remove_stopword(self, review):
        review = review.split(' ')
        review = [word for word in review if word not in self.stopwords_updated]
        return ' '.join(review)
# The above code defines a method named remove_stopword() within a class. 
# This method takes a review parameter, which is a string of text, and removes all the stopwords from it using the instance variable self.stopwords_updated, which is a list of English stopwords.


    def check_word(self, message):
        message = message.split(' ')
        temp = []
        for word in message:
            if len(word) > 2 and ((word in self.english_words_combined) or (word[0:5] in self.partial_words)):
                temp.append(word)
            else:
                pass
        if temp:
            return ' '.join(temp)
        else:
            return 'NaN'
# The above code defines a function named check_word() within a class. 
# This function is taking a message parameter, which is a string of text, and checking whether each word in the message is a valid English word using the instance variables self.english_words_combined and self.partial_words.
    
    def stemming(self, review):
        review = review.split(' ')
        review = [self.ps.stem(word) for word in review]
        return ' '.join(review)
# In above code I am defines a funtion stemming() within a class. 
# The function taking a string of text as input, which is referred to as review. 
# It then performing stemming on each word in the review by using an instance of the PorterStemmer class, which is a type of algorithm that reduces words to their base or root form. 
    
    def unique_word_count(self, df):
        all_words = (' '.join(list(df['stemmed_reviews']))).split(' ')
        unique_words = list(set(all_words))
        unique_word_count = {'word':[], 'count':[]}
        for word in unique_words:
            unique_word_count['word'].append(word)
            unique_word_count['count'].append(all_words.count(word))
        unique_word_count_df = pd.DataFrame.from_dict(unique_word_count)
        return unique_word_count_df
# The above code presents a function named unique_word_count() that belongs to a class. 
# This function expects a pandas DataFrame called df as an argument, which is expected to include a column with the name 'stemmed_reviews' that contains preprocessed text information.
        
